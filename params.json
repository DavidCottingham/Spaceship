{"name":"Space Dodge","tagline":"1GAM July 2013","body":"| Some things I worked on | Percent of overall project |\r\n|--------|---------|\r\n| Unity Basics (first time using Unity!) | Significant |\r\n| Basic Gameplay Design and Balance (first game!) | Significant |\r\n\r\n| Tools and Resources| |\r\n|--------|---------|\r\n| [Unity 4.1](http://www.unity3d.com/) | Game Engine / Editor |\r\n| C# | Scripting Language |\r\n| [Notepad++](http://notepad-plus-plus.org/) | IDE |\r\n| [GIMP](http://www.gimp.org/) | Image Editor |\r\n| [FreeSound.org](http://www.freesound.org/) | Sound Effects |\r\n| [incompetech.com](http://incompetech.com/) | Music |\r\n| [psionic3d.co.uk](http://www.psionic3d.co.uk/) | Ship Model |\r\n\r\n_Space Dodge_ is an arcade-style game where the player has to dodge oncoming enemy spaceships. The ships spawn with more frequency and fly faster as the game progresses. The enemies fly towards the player in three columns. The player can only move between these columns too. Therefore, the player has to dodge the ships by moving between them and can not stay in place for long since another ship will be coming towards him.\r\n\r\nThe gameplay is simple: survive as long as you can by avoiding collisions. The player is a spaceship that must weave between other ships flying towards him. At the beginning of the game, the enemy ships are slow and appear on screen infrequently and so are easy to avoid. As the game progresses, the challenge increases as the ships start to move faster, spawn more frequently, and have a higher chance of two ships occupying two columns at the same time (on the same horizontal plane or timeslice). The player's goal in the game is to increase his score, which increments each time a ship passes him. The player's speed also increases through time to aid in him avoiding the more difficult enemies. The ships' speed and spawn frequency hit their limit within a few minutes of play, but the chance for 2 columns to be occupied continues to increase for much longer. A skilled player is still challenged after several minutes of play but never reaches a point of impossibility. A high score is saved at death, so the player has a new goal to try to beat his best score.\r\n\r\nThe inspiration for this game is from an old Radioshack handheld game, which is similar to the old Tiger Electronics handhelds. It was called _Space Alien_, and you can see a picture of the handheld in the Media section. Two of the differences in the games are that in the handheld, movement by the player was instant and the enemies moved down their columns periodically to pre-defined spots (as was the nature of those types of handheld games). The instant player movement made the game feel different than _Space Dodge_'s movement over time. The game could go quicker since movement time didn't have to be taken into account. The fast speeds created tension and a challenge for the player. The challenge in _Space Dodge_ is similar yet different in that the player has to anticipate the movement of the enemies and move before there is an opening. The speeds of the enemies are ultimately slower, but the need for pre-emptive moving makes up for that challenge. The periodic movement of the enemies presented a challenge that the player had to guess when the enemy would move down to potentially collide with them or potentially open up a space to move to. The attempt to create a similar challenge is the same as before - preemptive player movement.\r\n\r\n## Personal Goal\r\nNot only was this my first 1GAM game, it was the first game I've ever released, so my goal in this project was to simply learn as much as I can. I needed to familiarize myself with the Unity3D game engine, other development tools, and basic game design concepts and practices.\r\n\r\n## What I Learned\r\n### Technical\r\nI feel I accomplished my personal goal since I completed and released the game; I had to have learned a lot of basics to get the game to a releasable state. Using C# as a scripting language, I was able to practice using the language, which I hadn't used much previously. For Unity itself, I learned the Unity3D interface, how to create and use scripts, and how to create and use GameObjects and Prefabs. As for scripting, I learned to detect and handle Collider and Trigger collisions. I created GameObjects from a prefab programmatically to spawn the enemies. I used a couple coroutines, PlayerPrefs to save the high score, and learned when I should send messages (SendMessage) versus when I objects should have a reference to another and call a script method directly with GetComponent. I used a bit of Unity's GUI components for menus, made a skybox, and worked with sound components for background music and ship engine sound effects. I was also able to learn basic 3D graphics concepts I was confused about before - namely textures versus materials and what a UV map is.\r\n\r\n### Non-Technical\r\nI could have learned more in this area, but what I did learn was that it is difficult to balance gameplay. Playtesting is key. While I knew it was an important step in the process, now I realize just how important it is. The necessity of it won't be forgotten in the future. In the same vein, I also gained some experience in what makes a game compelling to play. While a game like this is far from a great example of a compelling game, I did get a taste of what it would need to be better in this way. I attempted to do what I could with making it challenging and fair, but it would much more care and variety in gameplay to be a truly compelling game.\r\n\r\n### Challenges\r\nThe biggest challenge I had was to try to balance the increase in difficulty so that it was fun and challenging but still possible to potentially never die. It was important to me that it was possible to never die so that the player would never feel the game \"cheated\" him into a death. It would also give him a possible but improbable goal, compelling him to play more. I also spent more time than I wanted on figuring out how to make all the mechanics increase in difficulty together. By this I mean that had to get the enemy ships to increase in movement speed, spawning rate, and chance to spawn two as well as get the player to increase movement speed and rotation animation speed. I ended up using a lot of Send- and BroadcastMessages. This was likely a non-optimal solution though.\r\n\r\n## What I Would Change\r\nThere are, of course, things that I learned late in the process that I would have liked to go back and fix or update if I had to the time. For example, I used SendMessage and BroadcastMessage more than I probably should have. Having a settings menu would have been nice, but I hadn't learned how to allow the player to change things like resolution from within the game. I would also have liked to have the endstate transition better. There is no ship explosion upon hitting an enemy, and as soon as you collide, the game resets. I didn't try this for a couple reasons. First, I didn't really know how to go about making an explosion effect so learning how to do so would have prolonged development. Second, I felt having the level reset was the simplest way of resetting the level was to literally just re-load the level. As I mentioned in the known bugs section, I attempted to do something different, but delving into it further would have again prolonged development past the one month schedule.\r\n\r\nFor gameplay, it would have also been nice to have some sort of story in the game. I imagine it could be like the player character was trying to escape a planet for some reason. The first area the player sees would be over a planet's surface. Clearing that, they would move to orbit around the planet - the planet would be just barely visible at the bottom of the screen. I didn't develop those thoughts much further than that since I wasn't planning on doing a story for this simple game. Enemy variety would be nice too - I thought dodging asteroids would have worked well. More variety in gameplay would have been better as well. As the difficulty increased, perhaps there could be more \"lanes\" for the ships to travel in. I also thought it would be interesting to have some sort of an enemy boss mechanic. I didn't flesh that out enough to even know how that might work though.\r\n\r\n## Bugs Known At Release\r\nTwo bugs I didn't have time to figure out a workaround for were caused by the way I was handling the loading of the level. The first is to do with the background music. As soon as the level loads, I pause the game and display the pause menu to give the player options before jumping into playing. While this is less than ideal, I felt this was an acceptable allowance for a simple game such as this. The game pause call comes from the Start method of the game manager but any call to pause AudioSources would be out of order and would either not pause or not resume play at unpause (regrettably, I forget the specifics since I am writing this some time after completing the game). My workaround for the ship's engine sound loop was to mute it until the game was unpaused. However, I found this to be unacceptable for background music since the song would be at a different point than when the game was paused. So I left the background music playing even during game pause.\r\n\r\nThe second bug is that the player doesn't get to see his current attempt's score when he dies. (The player can see it at the top of the screen _during play_, but not after death). This is caused by the fact that I simply re-load the game's main level upon played death. I attempted to make a GUI display call, but making it stay for a prolonged time before the level load call would have complicated things beyond what I wanted to maintain for this simple game within my time limit. I felt that was acceptable since the high score is displayed at the top of the screen, but of course it would have been nice to fix the bug, had I more time to devote to it.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}